import customtkinter as ctk
from tkinter import *
from tkinter import ttk
import tkinter as tk
import tkinter.messagebox
import sqlite3

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("green")

root = ctk.CTk()
root.title("SSIS")
root.geometry("400x400")
root.resizable(False, False)


def tabmain():
    root.geometry("400x300")

    def tabstudent():
        root.geometry("1000x600")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, fill="y", side="left")
        frame2 = ctk.CTkFrame(master=root)
        frame2.pack(pady=(0, 20), padx=(0, 20),
                    fill="both", expand=True, side="bottom")
        frame3 = ctk.CTkFrame(master=root, width=700)
        frame3.pack(pady=(20, 0), fill="x", side="top")

        label1 = ctk.CTkLabel(
            master=frame1, text="Student Information", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

        # Connect to the SQLite database
        conn = sqlite3.connect('students.db')
        cursor = conn.cursor()

        cursor.execute('''CREATE TABLE IF NOT EXISTS students
                          (name TEXT, age TEXT, gpa TEXT, course TEXT)''')
        conn.commit()

        def add_student(name, age, gpa, course):
            # Insert student data into the database
            cursor.execute(
                "INSERT INTO students VALUES (?, ?, ?, ?)", (name, age, gpa, course))
            conn.commit()

        def submit_form():
            name = name_entry.get()
            age = year_entry.get()
            gpa = gender_entry.get()
            course = course_entry.get()

            # Add the student to the database
            add_student(name, age, gpa, course)

            # Clear the form fields
            name_entry.delete(0, ctk.END)
            year_entry.delete(0, ctk.END)

            # Update the tree view with the new student information
            update_treeview()

        def update_treeview():
            # Clear the tree view
            treeview.delete(*treeview.get_children())

            # Retrieve student information from the database
            cursor.execute("SELECT * FROM students")
            rows = cursor.fetchall()

            # Repopulate the tree view with the updated student information
            for idx, row in enumerate(rows):
                treeview.insert(parent="", index=idx,
                                iid=idx, text=idx, values=row)

        def update_student(name, age, gpa, course):
            # Update student information in the database
            cursor.execute(
                "UPDATE students SET age=?, gpa=?, course=? WHERE name=?", (age, gpa, course, name))
            conn.commit()

            # Update the tree view with the new information
            update_treeview()

        def update_form():
            # Get the selected student's information
            selected = treeview.selection()
            if not selected:
                tkinter.messagebox.showerror(
                    "Error", "Please select a student to update.")
                return
            values = treeview.item(selected)['values']
            if not values:
                tkinter.messagebox.showerror(
                    "Error", "Please select a student to update.")
                return
            name = values[0]
            age = year_entry.get()
            gpa = gender_entry.get()
            course = course_entry.get()
            update_student(name, age, gpa, course)

            # Clear the form fields
            name_entry.delete(0, ctk.END)
            year_entry.delete(0, ctk.END)
            gender_entry.delete(0, ctk.END)

        def delete_student():
            # Get the selected student
            selected_item = treeview.focus()
            if selected_item:
                student_info = treeview.item(selected_item, 'values')
                name = student_info[0]

                # Delete the student from the database
                cursor.execute("DELETE FROM students WHERE name=?", (name,))
                conn.commit()

                # Remove the selected item from the treeview
                treeview.delete(selected_item)

        def perform_search():
            search_query = search_entry.get().lower()

            # Search through the students' information in the database
            cursor.execute("SELECT * FROM students")
            rows = cursor.fetchall()
            search_results = [row for row in rows if any(
                search_query in info.lower() for info in row)]

            # Clear the tree view
            treeview.delete(*treeview.get_children())

            # Display search results in the tree view
            for idx, row in enumerate(search_results):
                treeview.insert(parent='', index=idx,
                                iid=idx, text=idx, values=row)

        def clear_search():
            search_entry.delete(0, ctk.END)
            update_treeview()

        name_entry = ctk.CTkEntry(master=frame1, placeholder_text="Name")
        name_entry.pack(pady=12, padx=10)

        year_entry = ctk.CTkEntry(master=frame1, placeholder_text="Year Level")
        year_entry.pack(pady=12, padx=10)

        gender_label = ctk.CTkLabel(master=frame1, text="Gender")
        gender_label.pack(padx=10)

        gender_entry = ctk.CTkComboBox(
            master=frame1, values=['Male', 'Female'])
        gender_entry.pack(pady=(0, 12), padx=10)

        course_label = ctk.CTkLabel(master=frame1, text="Course")
        course_label.pack(padx=10)

        course_entry = ttk.Combobox(frame1)
        course_entry.pack(pady=(0, 12), padx=10)

        def load_course_names():
            cursor.execute("SELECT name FROM courses")
            course_names = [row[0] for row in cursor.fetchall()]
            course_entry['values'] = course_names

        load_course_names()

        submit_button = ctk.CTkButton(
            master=frame1, text="Add Student", command=submit_form)
        submit_button.pack(pady=12, padx=10)

        update_button = ctk.CTkButton(
            master=frame1, text="Update Student", command=update_form)
        update_button.pack(pady=12, padx=10)

        search_entry = ctk.CTkEntry(master=frame3, placeholder_text="Search")
        search_entry.pack(pady=12, padx=10, side="left")

        search_button = ctk.CTkButton(
            master=frame3, text="Search", command=perform_search)
        search_button.pack(pady=12, padx=10, side="left")

        clear_button = ctk.CTkButton(
            master=frame3, text="Clear Search", command=clear_search)
        clear_button.pack(pady=12, padx=10, side="left")

        delete_button = ctk.CTkButton(
            master=frame1, text="Delete", command=delete_student)
        delete_button.pack(pady=12, padx=10)

        def show_selected_row(event):
            selected_row_id = treeview.selection()[0]
            values = treeview.item(selected_row_id, 'values')
            name_entry.delete(0, ctk.END)
            name_entry.insert(0, values[0])
            year_entry.delete(0, ctk.END)
            year_entry.insert(0, values[1])
            gender_entry.set(values[2])
            course_entry.set(values[3])

        treeview = ttk.Treeview(master=frame2)
        treeview.pack(fill="both", expand=True)

        treeview["columns"] = ("name", "year", "gender", "course")
        treeview.heading("name", text="Name")
        treeview.heading("year", text="Year Level")
        treeview.heading("gender", text="Gender")
        treeview.heading("course", text="Course")
        treeview.column("#0", width=40)
        treeview.column("name", width=250)
        treeview.column("year", width=150)
        treeview.column("gender", width=100)
        treeview.column("course", width=300)
        treeview.bind('<<TreeviewSelect>>', show_selected_row)

        # Fetch and populate tree view with data from the database
        cursor.execute("SELECT * FROM students")
        rows = cursor.fetchall()
        for idx, row in enumerate(rows):
            treeview.insert(parent="", index=idx,
                            iid=idx, text=idx, values=row)

        def back():
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            tabmain()

        buttonback = ctk.CTkButton(master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

    def tabcourse():
        root.geometry("350x600")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, padx=40, fill="both", expand=True)
        label1 = ctk.CTkLabel(
            master=frame1, text="Courses", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

        # Create a connection to the SQLite database
        conn = sqlite3.connect("courses.db")
        cursor = conn.cursor()

        # Create the courses table if it doesn't exist
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS courses (name TEXT, code TEXT)"
        )
        conn.commit()

        course_list = []  # Initialize the course_list variable

        def load_course_list():
            cursor.execute("SELECT name, code FROM courses")
            course_list.extend(cursor.fetchall())
            update_listbox()

        def add_course():
            course_name = course_name_entry.get()
            course_code = course_code_entry.get()
            if course_name and course_code:
                cursor.execute("INSERT INTO courses VALUES (?, ?)",
                               (course_name, course_code))
                conn.commit()
                load_course_list()  # Refresh the course list from the database
                course_name_entry.delete(0, ctk.END)
                course_code_entry.delete(0, ctk.END)

        def update_listbox():
            course_listbox.delete(0, ctk.END)
            for course_name, course_code in course_list:
                course_listbox.insert(
                    ctk.END, f"{course_name} ({course_code})")

        def delete_course():
            selected_course = course_listbox.get(ctk.ACTIVE)
            if selected_course:
                course_name, course_code = selected_course.split(" (")
                # Remove the closing parenthesis
                course_code = course_code[:-1]
                cursor.execute("DELETE FROM courses WHERE name = ? AND code = ?",
                               (course_name, course_code))
                conn.commit()
                update_listbox()

        def edit_course():
            selected_course = course_listbox.get(ctk.ACTIVE)
            if selected_course:
                course_name, course_code = selected_course.split(" (")
                # Remove the closing parenthesis
                course_code = course_code[:-1]
                course_name_entry.delete(0, ctk.END)
                course_code_entry.delete(0, ctk.END)
                course_name_entry.insert(0, course_name)
                course_code_entry.insert(0, course_code)
                delete_course()

        course_name_entry = ctk.CTkEntry(
            frame1, placeholder_text="Course Name")
        course_name_entry.pack(pady=12, padx=10)

        course_code_entry = ctk.CTkEntry(
            frame1, placeholder_text="Course Code")
        course_code_entry.pack(pady=12, padx=10)

        add_button = ctk.CTkButton(
            frame1, text="Add Course", command=add_course)
        add_button.pack(pady=12, padx=10)

        course_listbox = tk.Listbox(master=frame1)
        course_listbox.pack(pady=12, padx=10)
        course_listbox.config(width=25)

        delete_button = ctk.CTkButton(
            master=frame1, text="Delete Course", command=delete_course
        )
        delete_button.pack(pady=12, padx=10)

        edit_button = ctk.CTkButton(
            master=frame1, text="Edit Course", command=edit_course)
        edit_button.pack(pady=12, padx=10)

        def back():
            frame1.destroy()
            tabmain()

        buttonback = ctk.CTkButton(master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

        load_course_list()
        update_listbox()

    frame = ctk.CTkFrame(master=root)
    frame.pack(pady=20, padx=40, fill="both", expand=True)

    label1 = ctk.CTkLabel(
        master=frame, text="Student Simple Information System", font=("Roboto", 16))
    label1.pack(pady=(12, 24), padx=10)

    buttonstudent = ctk.CTkButton(
        master=frame, text="Students", width=160, height=50, font=("Rubik", 20), command=tabstudent)
    buttonstudent.pack()
    buttonstudent.place(relx=0.5, rely=0.3, anchor=tk.CENTER)

    buttoncourse = ctk.CTkButton(
        master=frame, text="Courses", width=160, height=50, font=("Rubik", 20), command=tabcourse)
    buttoncourse.pack()
    buttoncourse.place(relx=0.5, rely=0.7, anchor=tk.CENTER)


tabmain()

root.mainloop()
