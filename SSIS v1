import customtkinter as ctk
from tkinter import *
from tkinter import ttk
import tkinter as tk

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

root = ctk.CTk()
root.title("SSIS")
root.geometry("400x400")
root.resizable(False, False)


def tabmain():
    root.geometry("400x300")

# ===========================================STUDENT TAB===================================================================
    def tabstudent():
        root.geometry("1000x600")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, fill="y", side="left")
        frame2 = ctk.CTkFrame(master=root)
        frame2.pack(pady=(0, 20), padx=(0, 20), fill="both",
                    expand=True, side="bottom")
        frame3 = ctk.CTkFrame(master=root, width=700)
        frame3.pack(pady=(20, 0), fill="x", side="top")

        label1 = ctk.CTkLabel(
            master=frame1, text="Student Information", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

# --------------------------------------------FUNCTIONS--------------------------------------------------------
        def update_treeview():
            treeview.delete(*treeview.get_children())

            # repopulate the tree view with the updated student information
            with open('students.txt', 'r') as f:
                for line in f:
                    student_info = line.strip().split(', ')
                    treeview.insert('', 'end', values=student_info)

        def add_student():

            name = name_entry.get()
            year = year_entry.get()
            gender = gender_entry.get()
            course = course_entry.get()

            with open('students.txt', 'a') as f:
                # write the student's information to the file
                f.write(f'{name}, {year}, {gender}, {course}\n')

            # clear the form fields
            name_entry.delete(0, ctk.END)
            year_entry.delete(0, ctk.END)

            update_treeview()

        def update_form(name, year, gender, course):
            # read all students from file
            with open('students.txt', 'r') as f:
                students = [line.strip().split(', ') for line in f.readlines()]

            # find the student to update
            for student in students:
                if student[0] == name:
                    # update the student's information
                    student[1] = year
                    student[2] = gender
                    student[3] = course
                    break

            # write all students back to file
            with open('students.txt', 'w') as f:
                for student in students:
                    f.write(', '.join(student) + '\n')

            update_treeview()

        def update_student():
            # get the selected student's information
            selected = treeview.selection()
            values = treeview.item(selected)['values']
            name = values[0]
            year = year_entry.get()
            gender = gender_entry.get()
            course = course_entry.get()
            update_form(name, year, gender, course)

            # clear the form fields
            name_entry.delete(0, ctk.END)
            year_entry.delete(0, ctk.END)
            gender_entry.delete(0, ctk.END)

        def delete_student():
            # get the selected student
            selected_item = treeview.focus()
            if selected_item:
                student_info = treeview.item(selected_item, 'values')
                name = student_info[0]

                # open the file and read its contents
                with open('students.txt', 'r') as f:
                    lines = f.readlines()

                # remove the line with the selected student's information
                new_lines = []
                for line in lines:
                    if not line.startswith(name):
                        new_lines.append(line)

                # write the updated contents to the file
                with open('students.txt', 'w') as f:
                    f.writelines(new_lines)

                # remove the selected item from the treeview
                treeview.delete(selected_item)

        # function to perform search
        def perform_search():
            search_query = search_entry.get()
            search_results = []

            # Search through the students' information
            with open('students.txt', 'r') as f:
                for line in f.readlines():
                    student_info = line.strip().split(', ')
                    if any(search_query in info for info in student_info):
                        search_results.append(student_info)

            # Clear the tree view
            treeview.delete(*treeview.get_children())

            # Display search results in the tree view
            for idx, student_info in enumerate(search_results):
                treeview.insert(parent='', index=idx, iid=idx,
                                text=idx, values=student_info)

        # clear the search field
        def clear_search():
            search_entry.delete(0, ctk.END)
            update_treeview()

        # set value for courses in the courses.txt file
        with open("courses.txt", "r") as f:
            courses = [line.strip() for line in f]

        def back():
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            tabmain()

# ----------------------------------BUTTONS AND ENTRY FIELDS----------------------------------------------------------------
        # Entry for name of student
        name_entry = ctk.CTkEntry(master=frame1, placeholder_text="Name")
        name_entry.pack(pady=12, padx=10)

        # Entry for year of student
        year_entry = ctk.CTkEntry(master=frame1, placeholder_text="Year Level")
        year_entry.pack(pady=12, padx=10)

        # Label
        gender_label = ctk.CTkLabel(
            master=frame1, text="Gender")
        gender_label.pack(padx=10)

        # Gender selection entry
        gender_entry = ctk.CTkComboBox(
            master=frame1, values=['Male', 'Female'])
        gender_entry.pack(pady=(0, 12), padx=10)

        # Label
        course_label = ctk.CTkLabel(
            master=frame1, text="Course")
        course_label.pack(padx=10)

        # Course selection entry
        course_entry = ctk.CTkComboBox(
            master=frame1, values=courses)
        course_entry.pack(pady=(0, 12), padx=10)

        # Button to add student
        add_button = ctk.CTkButton(
            master=frame1, text="Add Student", command=add_student)
        add_button.pack(pady=12, padx=10)

        # Button to update student
        update_button = ctk.CTkButton(
            master=frame1, text="Update Student", command=update_student)
        update_button.pack(pady=12, padx=10)

        # Entry for searching
        search_entry = ctk.CTkEntry(master=frame3, placeholder_text="Search")
        search_entry.pack(pady=12, padx=10, side="left")

        # Button to perform search
        search_button = ctk.CTkButton(
            master=frame3, text="Search", command=perform_search)
        search_button.pack(pady=12, padx=10, side="left")

        # Button to clear the search field
        clear_button = ctk.CTkButton(
            master=frame3, text="Clear Search", command=clear_search)
        clear_button.pack(pady=12, padx=10, side="left")

        # Button to delete student
        delete_button = ctk.CTkButton(
            master=frame1, text="Delete", command=delete_student)
        delete_button.pack(pady=12, padx=10)

        buttonback = ctk.CTkButton(master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

# ------------------------------------------TREEVIEW----------------------------------------------------------------------
        # Function to populate the entries with the selection in the treeview
        def show_selected_row(event):
            selected_row_id = treeview.selection()[0]
            values = treeview.item(selected_row_id, 'values')
            name_entry.delete(0, ctk.END)
            name_entry.insert(0, values[0])
            year_entry.delete(0, ctk.END)
            year_entry.insert(0, values[1])
            gender_entry.set(values[2])
            course_entry.set(values[3])

        # Create the treeview
        treeview = ttk.Treeview(master=frame2)
        treeview.pack(fill="both", expand=True)

        # Treeview elements
        treeview["columns"] = ("name", "year", "gender", "course")
        treeview.heading("#0", text="ID")
        treeview.heading("name", text="Name")
        treeview.heading("year", text="Year Level")
        treeview.heading("gender", text="Gender")
        treeview.heading("course", text="Course")
        treeview.column("#0", width=40)
        treeview.column("name", width=250)
        treeview.column("year", width=150)
        treeview.column("gender", width=100)
        treeview.column("course", width=300)
        treeview.bind('<Double-1>', show_selected_row)

        # Populate the treeview
        with open('students.txt', 'r') as f:
            data = f.readlines()
            for idx, line in enumerate(data):
                student = line.strip().split(", ")
                treeview.insert(parent="", index=idx, iid=idx,
                                text=idx, values=student)

# ================================================COURSE TAB=========================================================
    def tabcourse():
        root.geometry("800x500")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, padx=(20, 1), fill="y", side="left")
        frame2 = ctk.CTkFrame(master=root)
        frame2.pack(pady=(1, 20), padx=(1, 20),
                    fill="both", expand=True, side="bottom")
        frame3 = ctk.CTkFrame(master=root, width=500, height=50)
        frame3.pack(pady=(20, 1), padx=(1, 20), fill="x", side="top")
        label1 = ctk.CTkLabel(
            master=frame1, text="Courses", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

# ---------------------------------------------FUNCTIONS------------------------------------------------------------
        course_list = []

        def load_course_list():
            try:
                with open("courses.txt", "r") as f:
                    for line in f.readlines():
                        course_name, course_code = line.strip().split(",")
                        course_list.append((course_name, course_code))
            except FileNotFoundError:
                pass

        def save_course_list():
            with open("courses.txt", "w") as f:
                for course_name, course_code in course_list:
                    f.write(f"{course_name},{course_code}\n")

        def add_course():
            course_name = course_name_entry.get()
            course_code = course_code_entry.get()
            if course_name and course_code:
                course_list.append((course_name, course_code))
                save_course_list()
                update_treeview()
                course_name_entry.delete(0, tk.END)
                course_code_entry.delete(0, tk.END)

        def update_treeview():
            course_treeview.delete(*course_treeview.get_children())
            for course_name, course_code in course_list:
                course_treeview.insert(
                    "", tk.END, values=(course_name, course_code))

        def delete_course():
            selected_item = course_treeview.focus()
            if selected_item:
                item_values = course_treeview.item(selected_item)['values']
                course_name, course_code = item_values[0], item_values[1]
                course_list.remove((course_name, course_code))
                save_course_list()
                update_treeview()

        def edit_course():
            selected_item = course_treeview.focus()
            if selected_item:
                item_values = course_treeview.item(selected_item)['values']
                course_name, course_code = item_values[0], item_values[1]
                course_name_entry.delete(0, tk.END)
                course_code_entry.delete(0, tk.END)
                course_name_entry.insert(0, course_name)
                course_code_entry.insert(0, course_code)
                delete_course()

        def search_course():
            search_text = search_entry.get().lower()
            search_results = []
            for course_name, course_code in course_list:
                if search_text in course_name.lower() or search_text in course_code.lower():
                    search_results.append((course_name, course_code))
            update_treeview_search(search_results)

        def clear_search():
            search_entry.delete(0, tk.END)
            update_treeview()

        def update_treeview_search(results):
            course_treeview.delete(*course_treeview.get_children())
            for course_name, course_code in results:
                course_treeview.insert(
                    "", tk.END, values=(course_name, course_code))

        def back():
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            tabmain()

# ---------------------------------------TREEVIEW---------------------------------------------------------------------
        course_treeview = ttk.Treeview(frame2, columns=(
            "Course Name", "Course Code"), show="headings")
        course_treeview.pack(pady=12, padx=10, fill="both", expand='TRUE')
        course_treeview.column("Course Name", width=300)
        course_treeview.heading("Course Name", text="Course Name")
        course_treeview.column("Course Code", width=100)
        course_treeview.heading("Course Code", text="Course Code")

# ------------------------------------------BUTTONS AND ENTRIES----------------------------------------------------
        # Entry for course name
        course_name_entry = ctk.CTkEntry(
            frame1, width=250, placeholder_text="Course Name")
        course_name_entry.pack(pady=12, padx=10)

        # Entry for course code
        course_code_entry = ctk.CTkEntry(
            frame1, placeholder_text="Course Code")
        course_code_entry.pack(pady=12, padx=10)

        # Button to add course
        add_button = ctk.CTkButton(
            frame1, text="Add Course", command=add_course)
        add_button.pack(pady=12, padx=10)

        # Entry for search
        search_entry = ctk.CTkEntry(
            frame3, width=200, placeholder_text="Search")
        search_entry.pack(pady=12, padx=10, side="left")

        # Button to perform search
        search_button = ctk.CTkButton(
            frame3, text="Search", command=search_course)
        search_button.pack(pady=12, padx=10, side="left")

        # Button to clear search
        clear_search_button = ctk.CTkButton(
            frame3, text="Clear Search", command=clear_search)
        clear_search_button.pack(pady=12, padx=10, side="left")

        # Button to edit course
        edit_button = ctk.CTkButton(
            frame1, text="Edit Course", command=edit_course)
        edit_button.pack(pady=12, padx=10)

        # Button to delete course
        delete_button = ctk.CTkButton(
            frame1, text="Delete Course", command=delete_course)
        delete_button.pack(pady=12, padx=10)

        load_course_list()
        update_treeview()

        # Button to go back to main tab
        buttonback = ctk.CTkButton(master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

# ======================================MAIN TAB===========================================================
    frame = ctk.CTkFrame(master=root)
    frame.pack(pady=20, padx=40, fill="both", expand=True)

    label1 = ctk.CTkLabel(
        master=frame, text="Student Simple Information System", font=("Roboto", 16))
    label1.pack(pady=(12, 24), padx=10)

    buttonstudent = ctk.CTkButton(
        master=frame, text="Students", width=160, height=50, font=("Rubik", 20), command=tabstudent)
    buttonstudent.pack()
    buttonstudent.place(relx=0.5, rely=0.3, anchor=tk.CENTER)

    buttoncourse = ctk.CTkButton(
        master=frame, text="Courses", width=160, height=50, font=("Rubik", 20), command=tabcourse)
    buttoncourse.pack()
    buttoncourse.place(relx=0.5, rely=0.7, anchor=tk.CENTER)


tabmain()

root.mainloop()
