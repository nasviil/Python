import customtkinter as ctk
from tkinter import *
from tkinter import ttk
import tkinter as tk
import tkinter.messagebox

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

root = ctk.CTk()
root.title("SSIS")
root.geometry("400x400")
root.resizable(False, False)


def tabmain():
    root.geometry("400x300")

    def tabstudent():
        root.geometry("1000x600")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, fill="y", side="left")
        frame2 = ctk.CTkFrame(master=root)
        frame2.pack(pady=(0, 20), padx=(0, 20), fill="both",
                    expand=True, side="bottom")
        frame3 = ctk.CTkFrame(master=root, width=700)
        frame3.pack(pady=(20, 0), fill="x", side="top")

        label1 = ctk.CTkLabel(
            master=frame1, text="Student Information", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

        with open("courses.txt", "r") as f:
            courses = [line.strip() for line in f]

        def add_student(name, age, gpa, contact_number, course):
            # open the file in append mode
            with open('students.txt', 'a') as f:
                # write the student's information to the file
                f.write(f'{name}, {age}, {gpa}, {contact_number}, {course}\n')

        def submit_form():
            name = name_entry.get()
            age = age_entry.get()
            gpa = gpa_entry.get()
            contact_number = contact_entry.get()
            course = course_entry.get()

            # add the student to the file
            add_student(name, age, gpa, contact_number, course)

            # clear the form fields
            name_entry.delete(0, ctk.END)
            age_entry.delete(0, ctk.END)
            gpa_entry.delete(0, ctk.END)
            contact_entry.delete(0, ctk.END)

            # update the tree view with the new student information
            update_treeview()

        def update_treeview():
            # clear the tree view
            treeview.delete(*treeview.get_children())

            # repopulate the tree view with the updated student information
            with open('students.txt', 'r') as f:
                for line in f:
                    student_info = line.strip().split(', ')
                    treeview.insert('', 'end', values=student_info)

        def update_student(name, age, gpa, contact_number, course):
            # read all students from file
            with open('students.txt', 'r') as f:
                students = [line.strip().split(', ') for line in f.readlines()]

            # find the student to update
            for student in students:
                if student[0] == name:
                    # update the student's information
                    student[1] = age
                    student[2] = gpa
                    student[3] = contact_number
                    student[4] = course
                    break

            # write all students back to file
            with open('students.txt', 'w') as f:
                for student in students:
                    f.write(', '.join(student) + '\n')

            # update the tree view with the new information
            update_treeview()

        def update_form():
            # get the selected student's information
            selected = treeview.selection()
            if not selected:
                tkinter.messagebox.showerror(
                    "Error", "Please select a student to update.")
                return
            values = treeview.item(selected)['values']
            if not values:
                tkinter.messagebox.showerror(
                    "Error", "Please select a student to update.")
                return
            name = values[0]
            age = age_entry.get()
            gpa = gpa_entry.get()
            contact_number = contact_entry.get()
            course = course_entry.get()
            update_student(name, age, gpa, contact_number, course)

            # clear the form fields
            name_entry.delete(0, ctk.END)
            age_entry.delete(0, ctk.END)
            gpa_entry.delete(0, ctk.END)
            contact_entry.delete(0, ctk.END)

        def delete_student():
            # get the selected student
            selected_item = treeview.focus()
            if selected_item:
                student_info = treeview.item(selected_item, 'values')
                name = student_info[0]

                # open the file and read its contents
                with open('students.txt', 'r') as f:
                    lines = f.readlines()

                # remove the line with the selected student's information
                new_lines = []
                for line in lines:
                    if not line.startswith(name):
                        new_lines.append(line)

                # write the updated contents to the file
                with open('students.txt', 'w') as f:
                    f.writelines(new_lines)

                # remove the selected item from the treeview
                treeview.delete(selected_item)

        def perform_search():
            search_query = search_entry.get().lower()
            search_results = []

            # Search through the students' information
            with open('students.txt', 'r') as f:
                for line in f.readlines():
                    student_info = line.strip().split(', ')
                    if any(search_query in info.lower() for info in student_info):
                        search_results.append(student_info)

            # Clear the tree view
            treeview.delete(*treeview.get_children())

            # Display search results in the tree view
            for idx, student_info in enumerate(search_results):
                treeview.insert(parent='', index=idx, iid=idx,
                                text=idx, values=student_info)

        def clear_search():
            search_entry.delete(0, ctk.END)
            update_treeview()

        name_entry = ctk.CTkEntry(master=frame1, placeholder_text="Name")
        name_entry.pack(pady=12, padx=10)

        age_entry = ctk.CTkEntry(master=frame1, placeholder_text="Age")
        age_entry.pack(pady=12, padx=10)

        gpa_entry = ctk.CTkEntry(master=frame1, placeholder_text="GPA")
        gpa_entry.pack(pady=12, padx=10)

        contact_entry = ctk.CTkEntry(
            master=frame1, placeholder_text="Contact Number")
        contact_entry.pack(pady=12, padx=10)

        course_entry = ctk.CTkComboBox(master=frame1, values=courses)
        course_entry.pack(pady=12, padx=10)

        submit_button = ctk.CTkButton(
            master=frame1, text="Add Student", command=submit_form)
        submit_button.pack(pady=12, padx=10)

        update_button = ctk.CTkButton(
            master=frame1, text="Update Student", command=update_form)
        update_button.pack(pady=12, padx=10)

        search_entry = ctk.CTkEntry(master=frame3, placeholder_text="Search")
        search_entry.pack(pady=12, padx=10, side="left")

        search_button = ctk.CTkButton(
            master=frame3, text="Search", command=perform_search)
        search_button.pack(pady=12, padx=10, side="left")

        clear_button = ctk.CTkButton(
            master=frame3, text="Clear Search", command=clear_search)
        clear_button.pack(pady=12, padx=10, side="left")

        delete_button = ctk.CTkButton(
            master=frame1, text="Delete", command=delete_student)
        delete_button.pack(pady=12, padx=10)

        def show_selected_row(event):
            selected_row_id = treeview.selection()[0]
            values = treeview.item(selected_row_id, 'values')
            name_entry.delete(0, ctk.END)
            name_entry.insert(0, values[0])
            age_entry.delete(0, ctk.END)
            age_entry.insert(0, values[1])
            gpa_entry.delete(0, ctk.END)
            gpa_entry.insert(0, values[2])
            contact_entry.delete(0, ctk.END)
            contact_entry.insert(0, values[3])
            course_entry.set(values[4])

        treeview = ttk.Treeview(master=frame2)
        treeview.pack(fill="both", expand=True)

        treeview["columns"] = ("name", "age", "gpa",
                               "contact_number", "course")
        treeview.heading("name", text="Name")
        treeview.heading("age", text="Age")
        treeview.heading("gpa", text="GPA")
        treeview.heading("contact_number", text="Contact Number")
        treeview.heading("course", text="Course")
        treeview.column("#0", width=0)
        treeview.column("name", width=200)
        treeview.column("age", width=150)
        treeview.column("gpa", width=50)
        treeview.column("contact_number", width=150)
        treeview.column("course", width=200)
        treeview.bind('<<TreeviewSelect>>', show_selected_row)

        with open('students.txt', 'r') as f:
            data = f.readlines()
            for idx, line in enumerate(data):
                student = line.strip().split(", ")
                treeview.insert(parent="", index=idx, iid=idx,
                                text=idx, values=student)

        def back():
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            tabmain()

        buttonback = ctk.CTkButton(master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

    def tabcourse():
        root.geometry("350x600")
        frame.destroy()
        frame1 = ctk.CTkFrame(master=root)
        frame1.pack(pady=20, padx=40, fill="both", expand=True)
        label1 = ctk.CTkLabel(
            master=frame1, text="Courses", font=("Roboto", 20))
        label1.pack(pady=(12, 24), padx=10)

        course_list = []

        def load_course_list():
            try:
                with open("courses.txt", "r") as f:
                    course_list.extend([line.strip()
                                        for line in f.readlines()])
            except FileNotFoundError:
                pass

        def save_course_list():
            with open("courses.txt", "w") as f:
                f.write("\n".join(course_list))

        def add_course():
            course_name = course_name_entry.get()
            if course_name:
                course_list.append(course_name)
                save_course_list()
                update_listbox()
                course_name_entry.delete(0, ctk.END)

        def update_listbox():
            course_listbox.delete(0, ctk.END)
            for course in course_list:
                course_listbox.insert(ctk.END, course)

        def delete_course():
            selected_course = course_listbox.get(ctk.ACTIVE)
            if selected_course:
                course_list.remove(selected_course)
                save_course_list()
                update_listbox()

        def edit_course():
            selected_course = course_listbox.get(ctk.ACTIVE)
            if selected_course:
                course_name_entry.delete(0, ctk.END)
                course_name_entry.insert(0, selected_course)
                delete_course()

        course_name_entry = ctk.CTkEntry(frame1)
        course_name_entry.pack(pady=12, padx=10)

        add_button = ctk.CTkButton(
            frame1, text="Add Course", command=add_course)
        add_button.pack(pady=12, padx=10)

        course_listbox = tk.Listbox(master=frame1)
        course_listbox.pack(pady=12, padx=10)
        course_listbox.config(width=25)

        delete_button = ctk.CTkButton(
            master=frame1, text="Delete Course", command=delete_course)
        delete_button.pack(pady=12, padx=10)

        edit_button = ctk.CTkButton(
            master=frame1, text="Edit Course", command=edit_course)
        edit_button.pack(pady=12, padx=10)

        load_course_list()
        update_listbox()

        def back():
            frame1.destroy()
            tabmain()
        buttonback = ctk.CTkButton(
            master=frame1, text="Back", command=back)
        buttonback.pack(side="bottom", pady=10, padx=10)

    frame = ctk.CTkFrame(master=root)
    frame.pack(pady=20, padx=40, fill="both", expand=True)

    label1 = ctk.CTkLabel(
        master=frame, text="Student Simple Information System", font=("Roboto", 16))
    label1.pack(pady=(12, 24), padx=10)

    buttonstudent = ctk.CTkButton(
        master=frame, text="Students", width=160, height=50, font=("Rubik", 20), command=tabstudent)
    buttonstudent.pack()
    buttonstudent.place(relx=0.5, rely=0.3, anchor=tk.CENTER)

    buttoncourse = ctk.CTkButton(
        master=frame, text="Courses", width=160, height=50, font=("Rubik", 20), command=tabcourse)
    buttoncourse.pack()
    buttoncourse.place(relx=0.5, rely=0.7, anchor=tk.CENTER)


tabmain()

root.mainloop()
